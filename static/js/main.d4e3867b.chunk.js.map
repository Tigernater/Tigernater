{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","components/CounterButton.js","components/Header.js","containers/App.js","action.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","console","log","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","CounterButton","updateCount","count","nextProps","nextState","color","onClick","Header","App","onRequestRobots","searchField","onSearchChange","isPending","filterRobots","filter","robot","toLowerCase","includes","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","Boolean","window","location","hostname","match","initialStateSearch","initialStateRobots","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.d4e3867b.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({name, email, id}) => {\r\n    return (\r\n        <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n            <img alt = 'Robots' src = {`https://robohash.org/${id}?200x200`}/>\r\n            <div>  \r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({robots}) => {\r\n\r\n    // if(true){\r\n    //     throw new Error('NOOOOOOOOOO!');\r\n    // }\r\n    console.log('CardList')\r\n    return (\r\n        <div>{\r\n           robots.map((user,i)=>{\r\n            return (\r\n            <Card key={i}\r\n             id={robots[i].id} \r\n             name={robots[i].name} \r\n             email={robots[i].email}/>)\r\n            })\r\n        }</div>\r\n    )\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({searchfield, searchChange}) => {\r\n    console.log('SearchBox')\r\n    return(\r\n        <div className = 'pa2'>\r\n        <input className = 'pa3 ba b--green bg-lightest-blue' \r\n        type='search' \r\n        placeholder='Search Robots'\r\n        onChange = {searchChange}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    return(\r\n        <div style ={{overflowY: 'scroll', border: '1px solid black', height: '500px'}}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Scroll;","import React, {Component} from 'react';\r\n\r\nclass ErrorBoundary extends Component {\r\n    constructor (props){\r\n        super(props);\r\n        this.state ={\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n\r\ncomponentDidCatch (error, info) {\r\n    this.setState({hasError:true})\r\n}\r\n\r\nrender(){\r\n    if(this.state.hasError){\r\n        return <h1>Oops. That is not good</h1>\r\n    }\r\n    return this.props.children\r\n}\r\n}\r\nexport default ErrorBoundary;","import React, {Component} from 'react';\r\n\r\nclass CounterButton extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state={\r\n            count: 0\r\n        }\r\n    }\r\n    shouldComponentUpdate(nextProps, nextState){\r\n        if (this.state.count !== nextState.count)\r\n        {return true}\r\n        return false\r\n    }\r\n    updateCount = () => {\r\n        this.setState(state=>{\r\n            return {count:state.count +1}})\r\n    }\r\n    render(){\r\n        console.log('CounterButton')\r\n        return <button color={this.props.color} onClick={this.updateCount}>Count: {this.state.count} </button>\r\n    }\r\n}\r\n\r\nexport default CounterButton;","import React, {Component} from 'react';\r\nimport CounterButton from './CounterButton';\r\n\r\nclass Header extends Component {\r\n    shouldComponentUpdate(nextProps, nextState){\r\n        return false;\r\n    }\r\n    render(){\r\n        console.log('Header')\r\n        return(\r\n            <div>\r\n                \r\n                 <h1 className = 'f1'> Robofriends </h1>\r\n                 <CounterButton color={'red'} />\r\n            </div>)\r\n    }\r\n}\r\n\r\nexport default Header;","import React, {Component} from  'react';\r\nimport {connect} from 'react-redux';\r\nimport CardList from '../components/CardList'\r\nimport SearchBox from '../components/SearchBox'\r\nimport Scroll from '../components/Scroll'\r\nimport ErrorBoundary from '../components/ErrorBoundary'\r\nimport Header from '../components/Header'\r\n\r\nimport {setSearchField, requestRobots} from '../action'\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        searchField: state.searchRobots.searchField,\r\n        robots:state.requestRobots.robots,\r\n        isPending: state.requestRobots.isPending,\r\n        error: state.requestRobots.error\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onSearchChange: (event) =>  dispatch(setSearchField(event.target.value)),\r\n        onRequestRobots: () => dispatch(requestRobots())\r\n    }\r\n}\r\n\r\nclass App extends Component{\r\n\r\n    componentDidMount(){\r\n        this.props.onRequestRobots();\r\n    }\r\n\r\n\r\n    render (){\r\n            const {searchField, onSearchChange, robots, isPending}= this.props;\r\n            const filterRobots = robots.filter(robot =>{\r\n            return robot.name.toLowerCase().includes(searchField.toLowerCase())\r\n        })\r\n        return isPending ?\r\n            <h1>Loading...</h1> :\r\n        (\r\n        <div className = 'tc'>\r\n            <Header />\r\n            <SearchBox searchChange ={onSearchChange}/>\r\n            <Scroll>\r\n            <ErrorBoundary>\r\n                <CardList robots={filterRobots}/>\r\n            </ErrorBoundary>\r\n            \r\n            </Scroll>\r\n        </div>   \r\n    )\r\n        }\r\n    }\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import {\r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_FAILED,\r\n    REQUEST_ROBOTS_SUCCESS\r\n} from './constants.js';\r\n\r\nexport const setSearchField = (text) => ({\r\n    type: CHANGE_SEARCH_FIELD,\r\n    payload: text\r\n})\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n    dispatch({type: REQUEST_ROBOTS_PENDING});\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(response => response.json())\r\n        .then(data => dispatch({type: REQUEST_ROBOTS_SUCCESS, payload: data}))\r\n        .catch(error =>  dispatch({type: REQUEST_ROBOTS_FAILED, payload: error}))\r\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {\r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_FAILED,\r\n    REQUEST_ROBOTS_SUCCESS\r\n} from './constants.js';\r\n\r\nconst initialStateSearch = {\r\n    searchField: ''\r\n\r\n}\r\n\r\nexport const searchRobots = (state=initialStateSearch, action={}) => {\r\n    switch(action.type){\r\n        case CHANGE_SEARCH_FIELD:\r\n            return Object.assign({}, state, {searchField:action.payload})\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst initialStateRobots ={\r\n    isPending:false,\r\n    robots:[],\r\n    error: ''\r\n}\r\n\r\nexport const requestRobots = (state=initialStateRobots, action={}) => {\r\n    switch(action.type){\r\n        case REQUEST_ROBOTS_PENDING:\r\n            return Object.assign({}, state, {isPending: true})\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n            return Object.assign({},state, {robots: action.payload, isPending: false })\r\n        case REQUEST_ROBOTS_FAILED:\r\n            return Object.assign({}, state, {error: action.payload, isPending: false })\r\n        default:\r\n            return state;\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider } from 'react-redux';\nimport {createStore, applyMiddleware, combineReducers} from 'redux';\n// import {createLogger} from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport { searchRobots, requestRobots } from './reducers';\n\n// const logger = createLogger();\nconst rootReducer =combineReducers({searchRobots, requestRobots})\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware))\n\nReactDOM.render(\n        <Provider store={store}>\n          <App  />\n        </Provider>\n  , document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}